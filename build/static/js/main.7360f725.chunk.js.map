{"version":3,"sources":["component/card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/componentErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","className","src","alt","CardList","robots","map","item","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAkBeA,G,MAdF,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,GAAKC,EAAqB,EAArBA,KAAOC,EAAc,EAAdA,SAEvB,OAEQ,yBAAKC,UAAU,mDAAmDH,GAAIA,GAClE,4BAAKC,GACL,2BAAIC,GACJ,yBAAKE,IAAG,+BAA0BJ,GAAMK,IAAI,qBCgB7CC,EAxBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAOC,GAEf,OAAS,kBAAC,EAAD,CACTC,IAAKD,EACLV,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,SAAUO,EAAKP,gBCGpBU,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OACI,yBAAKV,UAAU,OACX,2BACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAPI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAWC,OAAQ,kBAAoBC,OAAQ,UAClEJ,EAAMK,WCkBJC,E,YAnBP,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHA,E,+EAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAIG,KAAKJ,MAAMC,SACJ,4EAECG,KAAKX,MAAMK,a,GAdPQ,aCoDbC,E,YA5CX,aAAc,IAAD,8BACT,+CAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJR,E,iFAQQ,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAMjC,IAAD,EAE2Bb,KAAKJ,MAA7BlB,EAFH,EAEGA,OAAS4B,EAFZ,EAEYA,YAEVQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAGzD,OAAQvC,EAAOyC,OAIP,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,OARlC,wBAAIxC,UAAU,MAAd,kB,GA5BM4B,aCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.7360f725.chunk.js","sourcesContent":["import React  from \"react\";\nimport './card.css';\nimport 'tachyons';\n\nconst Card = ({id , name , username}) => {\n\n    return (\n        \n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\" id={id}>\n                <h2>{name}</h2>\n                <p>{username}</p>\n                <img src={`https://robohash.org/${id}`} alt=\"Bob The Robot\" />\n            </div>\n    )\n\n\n}\n\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({robots})=> {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((item , i) => {\r\n\r\n                    return  (<Card \r\n                    key={i} \r\n                    id={item.id} \r\n                    name={item.name}\r\n                    username={item.username}/> \r\n                    )\r\n                \r\n                })\r\n            }\r\n        </div>\r\n    )\r\n    \r\n    \r\n}\r\n\r\n\r\nexport default CardList","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa2 ba b--green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"Search Robots\"\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll' , border: '5px solid black' , height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Scroll","import React , {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                hasError: false\r\n            }\r\n        }\r\n        componentDidCatch(error, info){\r\n            this.setState({hasError: true});\r\n        }\r\n        render(){\r\n            if (this.state.hasError){\r\n                return <h1>Ooops. that is not good for the user to see.</h1>\r\n            } else {\r\n                return  this.props.children\r\n            }\r\n        }\r\n\r\n}\r\n\r\nexport default ErrorBoundary","import React, {Component} from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport './App';\r\nimport Scroll from '../component/Scroll';\r\nimport ErrorBoundary from '../component/componentErrorBoundary';\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {  \r\n            robots: [],\r\n            searchfield: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount (){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}));\r\n        \r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n    render(){\r\n\r\n        const {robots , searchfield} = this.state;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n\r\n        return !robots.length ?\r\n            <h1 className=\"tc\">Loading...</h1>\r\n            :\r\n            (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\" >RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n                );\r\n            }\r\n}\r\n\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App.js'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}